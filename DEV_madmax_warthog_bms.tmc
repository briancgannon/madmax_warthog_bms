include "target.tmh"

// Declare vars
int EngageAP; // Autopilot on/off
int APType; // Autopilot type

// program start
int main()
{

// ==== DEVICES ==== //
// Exclude these devices:
Configure(&HCougar, MODE_EXCLUDED);
Configure(&T16000, MODE_EXCLUDED);
Configure(&TWCSThrottle, MODE_EXCLUDED);
Configure(&TFRPRudder, MODE_EXCLUDED);
Configure(&T16000L, MODE_EXCLUDED);
// Don't exclude these devices:
// Configure(&LMFD, MODE_EXCLUDED);
// Configure(&RMFD, MODE_EXCLUDED);
// Configure(&JOYSTICK, MODE_EXCLUDED);
// Configure(&THROTTLE, MODE_EXCLUDED);

if(Init(&EventHandle)) return 1; // declare the event handler, return on error

// ==== Initial state ==== //
SetKBRate(32, 50);
SetKBLayout(KB_ENG);
SetShiftButton(&Joystick, S4); // Use paddle as shift modifier

// ==== Axis Configuration ==== //
// Joystick Axis
MapAxis(&Joystick, JOYX, DX_X_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
SetSCurve(&Joystick, JOYX, 0, 1, 0, 0, 0); // small center deadzone
MapAxis(&Joystick, JOYY, DX_Y_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
SetSCurve(&Joystick, JOYX, 0, 1, 0, 0, 0); // small center deadzone

// Throttle Axis - 5% idle cutoff - deadzone at 65%-75% for AB
MapAxis(&Throttle, THR_LEFT, DX_ZROT_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
SetCustomCurve(&Throttle, THR_LEFT, LIST(0,5, 65,70, 75,70, 100,100)); // 5% idle cutoff & deadzone at 65%-75%
MapAxis(&Throttle, THR_RIGHT, DX_Z_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
SetCustomCurve(&Throttle, THR_RIGHT, LIST(0,5, 65,70, 75,70, 100,100)); // 5% idle cutoff & deadzone at 65%-75%

// Throttle - Idle Cutoff
// BMS Configuration Settings/Hardware should have "IDLE OFF" checked
MapKey (&Throttle, IDLELON,
EXEC("TrimDXAxis(DX_ZROT_AXIS, 90);"));
MapKeyR (&Throttle, IDLELON,
EXEC("TrimDXAxis(DX_ZROT_AXIS, SET(0));"));
MapKey (&Throttle, IDLERON,
EXEC("TrimDXAxis(DX_Z_AXIS, 90);"));
MapKeyR (&Throttle, IDLERON,
EXEC("TrimDXAxis(DX_Z_AXIS, SET(0));"));

// Throttle Slider Axis - reduction of sensitivity in center
MapAxis(&Throttle, THR_FC, DX_SLIDER_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
SetSCurve(&Throttle, THR_FC, 0, 0, 0, 5, 0);

// Throttle Slew Axis - Disabled cuz it sucks
//MapAxis(&Throttle, SCX, DX_XROT_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
//SetSCurve(&Throttle, SCX, 0, 15, 0, 0, 0);
//MapAxis(&Throttle, SCY, DX_YROT_AXIS, AXIS_REVERSED, MAP_ABSOLUTE);
//SetSCurve(&Throttle, SCY, 0, 15, 0, 0, 0);

// ==== LED ==== //
// Set initial backlight (0-255)
ActKey(PULSE+KEYON+LED(&Throttle, LED_INTENSITY, 45));

// Init all LED status to "OFF"
ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED1)); // LED 1 OFF
ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED2)); // LED 2 OFF
ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED3)); // LED 3 OFF
ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4)); // LED 4 OFF
ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED5)); // LED 5 OFF

// LED throttle position indicator; LED 1 - MIL Power; LED 1-5 AB
KeyAxis(&Throttle, THR_LEFT, 0, AXMAP2(LIST( 0, 65, 75 ), LED(&Throttle, LED_ONOFF, LED_CURRENT-LED1), 
    CHAIN( 
        LED(&Throttle, LED_ONOFF, LED_CURRENT+LED1), D(), 
        LED(&Throttle, LED_ONOFF, LED_CURRENT-LED2), D(), 
        LED(&Throttle, LED_ONOFF, LED_CURRENT-LED3), D(), 
        LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4), D(), 
        LED(&Throttle, LED_ONOFF, LED_CURRENT-LED5)
    ), 
    CHAIN( 
        LED(&Throttle, LED_ONOFF, LED_CURRENT+LED2), D(), 
        LED(&Throttle, LED_ONOFF, LED_CURRENT+LED3), D(), 
        LED(&Throttle, LED_ONOFF, LED_CURRENT+LED4), D(), 
        LED(&Throttle, LED_ONOFF, LED_CURRENT+LED5)) 
    ));

// ==== Joystick DX Mapping ==== //

// Trigger
MapKey(&Joystick, TG1, DX1); // Trigger stage 1
MapKey(&Joystick, TG2, DX2); // Trigger stage 2

// Switches
MapKey(&Joystick, S1, DX3); // Master mode
MapKey(&Joystick, S2, DX4); // Weapon release
MapKey(&Joystick, S3, DX5); // Pinky
MapKey(&Joystick, S4, 0); // Paddle - Set as Shift modifier

// Trim POV hat 
MapKey(&Joystick, H1U, DXHATUP); // Trim hat up
MapKey(&Joystick, H1R, DXHATRIGHT); // Trim hat right
MapKey(&Joystick, H1D, DXHATDOWN); // Trim hat down
MapKey(&Joystick, H1L, DXHATLEFT); // Trim hat left

// TMS
MapKey(&Joystick, H2U, DX6); // TMS up
MapKey(&Joystick, H2R, DX7); // TMS right
MapKey(&Joystick, H2D, DX8); // TMS down
MapKey(&Joystick, H2L, DX9); // TMS left

// DMS
MapKey(&Joystick, H3U, DX10); // DMS up
MapKey(&Joystick, H3R, DX11); // DMS right
MapKey(&Joystick, H3D, DX12); // DMS down
MapKey(&Joystick, H3L, DX13); // DMS left

// CMS
MapKey(&Joystick, H4U, DX14); // CMS up
MapKey(&Joystick, H4R, DX15); // CMS right
MapKey(&Joystick, H4D, DX16); // CMS down
MapKey(&Joystick, H4L, DX17); // CMS left
MapKey(&Joystick, H4P, PULSE+L_ALT+USB[0X15]); //Trim Reset USB=R


// ==== Throttle DX Mapping ==== //

// Slew
MapKey(&Throttle, SC, 0); // Disabled.  TrackIR center.

// Left throttle button
MapKey(&Throttle, LTB, DX18); // Uncage

// Coolie switch
MapKey(&Throttle, CSU, DX19); // Antenna Elevation Up
MapKey(&Throttle, CSD, DX20); // Antenna Elevation Down
MapKey(&Throttle, CSL, DX21); // Man Range Increase
MapKey(&Throttle, CSR, DX22); // Man Range Decrease

// Mic switch
MapKey(&Throttle, MSU, DX23); //IFF Out
MapKey(&Throttle, MSD, DX24); //IFF In
MapKey(&Throttle, MSL, DX25); //UHF
MapKey(&Throttle, MSR, DX26); //VHF
MapKey(&Throttle, MSP,    0); // Disabled.  VoiceAttack PTT.

// Speedbrakes
MapKey(&Throttle, SPDF, DX27); // Speed brakes retract
MapKey(&Throttle, SPDM,    0); // Speed brakes hold
MapKey(&Throttle, SPDB, DX28); // Speed brakes extend

// Boat switch
MapKey(&Throttle, BSB, DX29); //DGFT Override
MapKey(&Throttle, BSM,     0); //Override Self Cancel
MapKey(&Throttle, BSF, DX30); //MRM Override

// China hat
MapKey(&Throttle, CHF, DX31); //Next Steerpoint
MapKey(&Throttle, CHM,    0); //Not Used
MapKey(&Throttle, CHB, DX32); //Previous Steerpoint



// ==== Throttle Keyboard Mapping ==== //

// Pinky switch
// Forward = Navigation Light: Flash - Anti-Collision: Off
MapKey(&Throttle, PSB, CHAIN(
							LOCK+PULSE+L_SHIFT+L_CTL+USB[0x0C],LOCK, //Flash  [USB: I]
							D(),
							LOCK+PULSE+L_SHIFT+L_CTL+USB[0x12],LOCK, //Bright  [USB: O]
							D(),
							LOCK+PULSE+L_CTL+L_SHIFT+USB[0x18],LOCK, //Anticollision On [USB: U]
							D(),
							LOCK+PULSE+L_CTL+USB[0x10],LOCK //Master On [USB: M]									
							));

// Center = All lights off
MapKey(&Throttle, PSM, LOCK+PULSE+L_ALT+USB[0x10],LOCK); // Master off [USB: M]

// AFT = Navigation Light: Steady - Anti-Collision: Off
MapKey(&Throttle, PSF, CHAIN(
							LOCK+PULSE+L_SHIFT+USB[0x0C],LOCK, //Steady  [USB: I]
							D(),
							LOCK+PULSE+L_SHIFT+L_CTL+USB[0x12],LOCK, //Bright  [USB: O]
							D(),
							LOCK+PULSE+L_CTL+L_SHIFT+USB[0x18],LOCK, //Anticollision On [USB: U]
							D(),
    						LOCK+PULSE+L_CTL+USB[0x10],LOCK //Master On [USB: M]
                            ));

// Flaps (gear)
MapKey(&Throttle, FLAPU, PULSE+USB[0x0A]); //Gear Up [USB: G]
MapKey(&Throttle, FLAPD, PULSE+L_ALT+L_SHIFT+L_CTL+USB[0x0A]); //Gear Down [USB: G]                         

// Engine fuel flow left
MapKey(&Throttle, EFLNORM, PULSE+L_SHIFT+USB[0x06]); //Cat I  [USB:C]
MapKey(&Throttle, EFLOVER, PULSE+L_CTL+L_ALT+L_SHIFT+USB[0x06]); //Cat III  [USB:C]

// Engine fuel flow right
MapKey(&Throttle, EFRNORM, PULSE+L_SHIFT+USB[0x10]); //Master Arm On  [USB:M]
MapKey(&Throttle, EFROVER, PULSE+L_CTL+L_ALT+L_SHIFT+USB[0x10]); //Master Arm Safe  [USB:M]

// Engine operate left & right
MapKey(&Throttle, EOLIGN, PULSE+L_CTL+USB[0x06]); //Canopy  [USB:C]
MapKey(&Throttle, EORIGN, PULSE+L_SHIFT+USB[0x0D]); //JFS  [USB:J]

// APU
MapKey(&Throttle, APUON, PULSE+L_ALT+USB[0x0A]); //Alt Gear Down  [USB:G]
MapKey(&Throttle, APUOFF, PULSE+L_ALT+USB[0x0A]); //Alt Gear Down  [USB:G]

// Landing Gear
MapKey(&Throttle, LDGH, PULSE+L_SHIFT+USB[0x0A]); //Alternate Gear Reset  [USB:G]

// Autopilot
MapKey(&Throttle, APPAT, PULSE+L_SHIFT+USB[0x04]); // Short: Follow HSI heading - Long: Follow HSI & hold pitch  [USB:A]
MapKey(&Throttle, APAH, PULSE+L_CTL+L_SHIFT+L_ALT+USB[0x04]);  // Short Hold roll angle and altitude - Long: Hold roll & pitch angle  [USB:A]
MapKey(&Throttle, APALT, PULSE+L_SHIFT+USB[0x11]); // Short: Follow Course to Next Waypoint - Long: Follow waypoint & hold pitch  [USB:N]

// Autopilot Engage/Disengage
MapKey(&Throttle, APENG, CHAIN(DOWN+L_CTL+USB[0x0D], D(1500), UP+USB[0x0D], D(100), UP+L_CTL)); //Emergency Jettison  [USB:J [USB:J]

// Radar Altimeter
MapKey(&Throttle, RDRNRM, PULSE+L_SHIFT+USB[0x0F]); //Landing Lights On  [USB:L]
MapKey(&Throttle, RDRDIS, PULSE+L_ALT+USB[0x0F]); //Landing Lights Off [USB:L]

// EAC
MapKey(&Throttle, EACOFF, PULSE+L_CTL+USB[0x13]); //Brake Off  [USB:P]
MapKey(&Throttle, EACON, PULSE+L_ALT+USB[0x13]); //Brake On  [USB:P]

// ==== MFD ==== //




// ==== Launch Apps ==== //
// system("spawn -w \"C:\\Falcon BMS 4.33 U1\" \"D:\\Falcon BMS 4.33 U1\\Launcher.exe\"");
// system("spawn -w \"C:\\Program Files (x86)\\VoiceAttack\" \"C:\\Program Files (x86)\\VoiceAttack\\VoiceAttack.exe\"");


}
// end main block

int EventHandle(int type, alias o, int x)
{

    DefaultMapping(&o, x);
    // event handlers go here
}